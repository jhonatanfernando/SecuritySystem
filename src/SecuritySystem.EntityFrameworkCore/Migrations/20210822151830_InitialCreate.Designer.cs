// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecuritySystem.EntityFrameworkCore;

namespace SecuritySystem.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(SecuritySystemDbContext))]
    [Migration("20210822151830_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SecuritySystem.Core.Models.ControlAccess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("DoorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasAccess")
                        .HasColumnType("bit");

                    b.Property<Guid>("KeyCardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoorId");

                    b.HasIndex("KeyCardId");

                    b.ToTable("ControlAccesses");
                });

            modelBuilder.Entity("SecuritySystem.Core.Models.Door", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doors");
                });

            modelBuilder.Entity("SecuritySystem.Core.Models.DoorLogActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateTimeEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DoorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<string>("keyCardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DoorLogActivities");
                });

            modelBuilder.Entity("SecuritySystem.Core.Models.KeyCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KeyCards");
                });

            modelBuilder.Entity("SecuritySystem.Core.Models.MotionSensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MotionSensors");
                });

            modelBuilder.Entity("SecuritySystem.Core.Models.MotionSensorActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAlarmTriggered")
                        .HasColumnType("bit");

                    b.Property<Guid>("MotionSensorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MotionSensorId");

                    b.ToTable("MotionSensorActivities");
                });

            modelBuilder.Entity("SecuritySystem.Core.Models.ControlAccess", b =>
                {
                    b.HasOne("SecuritySystem.Core.Models.Door", "Door")
                        .WithMany()
                        .HasForeignKey("DoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecuritySystem.Core.Models.KeyCard", "KeyCard")
                        .WithMany()
                        .HasForeignKey("KeyCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Door");

                    b.Navigation("KeyCard");
                });

            modelBuilder.Entity("SecuritySystem.Core.Models.MotionSensorActivity", b =>
                {
                    b.HasOne("SecuritySystem.Core.Models.MotionSensor", "MotionSensor")
                        .WithMany()
                        .HasForeignKey("MotionSensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MotionSensor");
                });
#pragma warning restore 612, 618
        }
    }
}
